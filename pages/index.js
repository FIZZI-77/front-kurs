import Head from "next/head";
import { useEffect, useState } from "react";
import { BsFillMoonStarsFill, BsFillSunFill } from "react-icons/bs";
import Link from 'next/link';
import Calendar from "react-calendar";
import 'react-calendar/dist/Calendar.css';
import TimePicker from 'react-time-picker';
import 'react-time-picker/dist/TimePicker.css';
import 'react-clock/dist/Clock.css';

export default function Home() {
  const [darkMode, setDarkMode] = useState(false);
  const [entry, setEntry] = useState([]);
  const [events, setEvents] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [timeError, setTimeError] = useState("");

  const handleSetEntries = () => {
    if (!startTime || !endTime) {
      setTimeError("Пожалуйста, выберите время начала и окончания");
      return;
    }
    if (endTime <= startTime) {
      setTimeError("Время окончания должно быть позже времени начала");
      return;
    }
    setTimeError("");

    const dateString = selectedDate.toLocaleDateString();
    let entries = [
      ...entry,
      {
        id: entry.length + 1,
        events: events,
        startTime: startTime,
        endTime: endTime,
        date: dateString,
      },
    ];
    setEntry(entries);
    localStorage.setItem("entries", JSON.stringify(entries));
    handleReset();
  };

  const handleDelete = (id) => {
    let entries = entry.filter((item) => item.id !== id);
    setEntry(entries);
    localStorage.setItem("entries", JSON.stringify(entries));
  };

  const handleReset = () => {
    setEvents("");
    setStartTime("");
    setEndTime("");
  };

  const setData = () => {
    setEntry(JSON.parse(localStorage.getItem("entries")) || []);
  };

  useEffect(() => {
    setData();
    document.body.classList.toggle("dark", darkMode);
  }, [darkMode]);

  const getDate = () => {
    const monthNames = [
      "January", "February", "March", "April", "May", "June",
      "July", "August", "September", "October", "November", "December",
    ];
    let monthIndex = new Date().getMonth();
    let monthName = monthNames[monthIndex];
    const current = new Date();
    return `${monthName}-${current.getDate()}-${current.getFullYear()}`;
  };

  return (
    <div>
      <Head>
        <title>Day Planner</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-white px-10 md:px-20 lg:px-40 dark:bg-gray-900">
        <section className="min-h-100">
          <nav className="py-10 mb-12 flex justify-between">
            <h1 className="text-xl font-burtons dark:text-white">Day Planner</h1>
            <ul className="flex items-center">
              <li className="mr-5">
                <Link href="/settings" className="text-teal-600 dark:text-teal-400">
                  Settings
                </Link>
              </li>
              <li className="mr-5">
                <Link href="/analytics" className="text-teal-600 dark:text-teal-400">
                  Analytics
                </Link>
              </li>
              <li className="mr-5">
                <Link href="/calendar" className="text-teal-600 dark:text-teal-400">
                  Calendar
                </Link>
              </li>
              <li className="mr-5">
                <Link href="/profile" className="text-teal-600 dark:text-teal-400">
                  Profile
                </Link>
              </li>
              {!darkMode ? (
                <li>
                  <BsFillMoonStarsFill
                    onClick={() => setDarkMode(!darkMode)}
                    className="cursor-pointer text-2xl"
                  />
                </li>
              ) : (
                <li>
                  <BsFillSunFill
                    onClick={() => setDarkMode(!darkMode)}
                    className="cursor-pointer text-2xl text-white"
                  />
                </li>
              )}
            </ul>
          </nav>
          <div className="text-center p-10">
            <h2 className="text-5xl text-teal-600 font-medium md:text-6xl">
              Планировщик расписания рабочего дня
            </h2>
            <h3 className="text-2xl py-2 md:text-3xl dark:text-white">
              Простое приложение-календарь для планирования вашего рабочего дня
            </h3>
            <p className="text-lg font-semibold py-5 leading-8 text-gray-800 md:text-xl max-w-lg mx-auto dark:text-white">
              {getDate()}
            </p>
          </div>
        </section>

        <section className="min-h-screen">
        <div className="flex flex-col md:flex-row justify-between items-center mb-44 p-3 md:p-4 shadow-lg bg-slate-300 rounded-xl dark:bg-gray-800 gap-8 max-w-4xl mx-auto">
            {/* Обёртка для календаря и времени */}
            <div className="flex flex-col items-center gap-6">
              <h3 className="text-xl font-semibold dark:text-white mb-4">
                Выберите дату и время
              </h3>
              <Calendar
                onChange={setSelectedDate}
                value={selectedDate}
                className="max-w-xs"
              />
            </div>

             {/* Блок выбора времени и событий */}
            <div className="flex flex-col items-center gap-6 w-full md:w-auto">
              <div className="flex flex-col md:flex-row items-center gap-6">
                <div className="flex flex-col items-center">
                  <label className="mb-2 font-semibold dark:text-white flex items-center gap-2">
                    <BsFillSunFill /> Время начала
                  </label>
                  <TimePicker
                    onChange={setStartTime}
                    value={startTime}
                    disableClock={true}
                    clearIcon={null}
                    clockIcon={null}
                    className="dark:bg-gray-700 dark:text-white rounded-md"
                  />
                </div>

                <div className="flex flex-col items-center">
                  <label className="mb-2 font-semibold dark:text-white flex items-center gap-2">
                    <BsFillMoonStarsFill /> Время конца
                  </label>
                  <TimePicker
                    onChange={setEndTime}
                    value={endTime}
                    disableClock={true}
                    clearIcon={null}
                    clockIcon={null}
                    className="dark:bg-gray-700 dark:text-white rounded-md"
                  />
                </div>
              </div>

              <input
                type="text"
                className="w-full md:w-64 h-10 rounded-md border-2 border-gray-300 dark:bg-gray-800 dark:text-white px-3"
                placeholder="Введите событие"
                value={events}
                onChange={(e) => setEvents(e.target.value)}
              />

              <div className="flex gap-4">
                <button
                  className="bg-teal-600 text-white px-6 py-2 rounded-md hover:bg-teal-700 transition whitespace-nowrap"
                  onClick={handleSetEntries}
                >
                  Сохранить
                </button>
                <button
                  className="bg-gray-400 text-gray-800 px-6 py-2 rounded-md hover:bg-gray-500 transition whitespace-nowrap"
                  onClick={handleReset}
                >
                  Сбросить
                </button>
              </div>
            </div>
          </div>
          {timeError && (
            <p className="text-red-600 text-center mb-6">{timeError}</p>
          )}
          <div className="flex justify-between items-center mb-44 p-8 shadow-lg bg-slate-300 rounded-xl dark:bg-gray-800 overflow-x-auto">
            <table className="min-w-full border-collapse block md:table">
              <thead className="block md:table-header-group">
                <tr className="border border-grey-500 md:border-none block md:table-row absolute -top-full md:top-auto -left-full md:left-auto md:relative dark:bg-gray-800 dark:text-white">
                  <th className="bg-gray-600 p-2 text-white font-bold md:border md:border-grey-500 text-left block md:table-cell">
                    Id
                  </th>
                  <th className="bg-gray-600 p-2 text-white font-bold md:border md:border-grey-500 text-left block md:table-cell">
                    Date
                  </th>
                  <th className="bg-gray-600 p-2 text-white font-bold md:border md:border-grey-500 text-left block md:table-cell">
                    Time
                  </th>
                  <th className="bg-gray-600 p-2 text-white font-bold md:border md:border-grey-500 text-left block md:table-cell">
                    Event
                  </th>
                  <th className="bg-gray-600 p-2 text-white font-bold md:border md:border-grey-500 text-left block md:table-cell">
                    Actions
                  </th>
                </tr>
              </thead>
              {entry.map((item) => (
                <tbody
                  key={item.id}
                  className="block md:table-row-group dark:bg-gray-800 dark:text-white"
                >
                  <tr className="bg-gray-300 border border-grey-500 md:border-none block md:table-row dark:bg-gray-800 dark:text-white">
                    <td className="p-2 md:border md:border-grey-500 text-left block md:table-cell">{item.id}</td>
                    <td className="p-2 md:border md:border-grey-500 text-left block md:table-cell">{item.date}</td>
                    <td className="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                      {item.startTime} - {item.endTime}
                    </td>
                    <td className="p-2 md:border md:border-grey-500 text-left block md:table-cell">{item.events}</td>
                    <td className="p-2 md:border md:border-grey-500 text-left block md:table-cell">
                      <button
                        onClick={() => handleDelete(item.id)}
                        className="bg-red-600 text-white px-3 py-1 rounded-md hover:bg-red-700 transition"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                </tbody>
              ))}
            </table>
          </div>
        </section>
      </main>

      <style jsx global>{`
        .react-calendar {
          border: none;
          background-color: transparent;
          font-family: Arial, sans-serif;
          width: 100%;
          max-width: 400px;
        }
        .react-calendar__tile {
          padding: 10px;
          background: #e0f2f1;
          color: #00695c;
          border-radius: 6px;
          margin: 4px;
        }
        .react-calendar__tile--active {
          background: #004d40;
          color: white;
          border-radius: 6px;
        }
        .react-time-picker__wrapper {
          border: 1px solid #ccc;
          border-radius: 6px;
          padding: 6px 10px;
          background-color: #f9fafb;
          width: 140px;
        }
        .dark .react-time-picker__wrapper {
          background-color: #374151;
          border-color: #4b5563;
          color: white;
        }
      `}</style>
    </div>
  );
}
